"""
SUM vs XOR
0 <= x <= n
n + x == n ^ x인 x 찾기
"""
"""
example:
101

101 + 10 -> 111
101 ^ 10 -> 111

1010 + 0000 -> 1010
1010 ^ 0000 -> 1010

1010 + 0001 -> 1011
1010 ^ 0001 -> 1011

1010 + 0100 -> 1110
1010 ^ 0100 -> 1110

1010 + 0101 -> 1011
1010 ^ 0101 -> 1111

번외:
1010 + 0011 -> 1101
1010 ^ 0011 -> 1001

10100

00000
00001
00010
00011
01000
01001
01010
01011


규칙을 찾아보면 
해당 자리가 0일 때: 0 또는 1 모두 가능
해당 자리가 1일 때: 0만 가능
"""
"""
1. 비트를 가장 끝 부터 탐색
2. 비트가 0인 개수를 세고 2 ** 0인 개수의 값을 구하기
"""


def sumXor(n):
    counts = 0

    for i in range(64):
        if (1 << i) > n:
            break

        if (n & (1 << i)) == 0:
            counts += 1

    return 2**counts


n = 4
print(sumXor(10))
